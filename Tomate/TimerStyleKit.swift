//
//  TimerStyleKit.swift
//  Tomate
//
//  Created by Dominik Hauser on 11.03.15.
//  Copyright (c) 2015 dasdom. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class TimerStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var backgroundColor: UIColor = UIColor(red: 0.141, green: 0.149, blue: 0.204, alpha: 1.000)
        static var timerColor: UIColor = UIColor(red: 0.378, green: 0.670, blue: 0.961, alpha: 1.000)
    }

    //// Colors

    public class var backgroundColor: UIColor { return Cache.backgroundColor }
    public class var timerColor: UIColor { return Cache.timerColor }

    //// Drawing Methods

    public class func drawTimerAppIcon(#durationInSeconds: CGFloat, maxValue: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow = TimerStyleKit.timerColor
        let shadowOffset = CGSizeMake(0.1, -0.1)
        let shadowBlurRadius: CGFloat = 4

        //// Variable Declarations
        let seconds: CGFloat = durationInSeconds % 60
        let minutes: CGFloat = floor(durationInSeconds / 60.0)
        let labelText = "\(Int(round(minutes)))" + ":" + "\(Int(round(seconds)))"
        let endAngle: CGFloat = 90 - durationInSeconds * 360 / maxValue

        //// TimerRing Drawing
        var timerRingRect = CGRectMake(62, 62, 900, 900)
        var timerRingPath = UIBezierPath()
        timerRingPath.addArcWithCenter(CGPointMake(timerRingRect.midX, timerRingRect.midY), radius: timerRingRect.width / 2, startAngle: -90 * CGFloat(M_PI)/180, endAngle: -endAngle * CGFloat(M_PI)/180, clockwise: true)

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, (shadow as UIColor).CGColor)
        TimerStyleKit.timerColor.setStroke()
        timerRingPath.lineWidth = 20
        CGContextSaveGState(context)
        CGContextSetLineDash(context, 0, [120, 6], 2)
        timerRingPath.stroke()
        CGContextRestoreGState(context)
        CGContextRestoreGState(context)


        //// Text Drawing
        let textRect = CGRectMake(156, 338, 713, 292)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, (shadow as UIColor).CGColor)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica-Light", size: 250)!, NSForegroundColorAttributeName: TimerStyleKit.timerColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: labelText).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: labelText).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
        CGContextRestoreGState(context)
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
