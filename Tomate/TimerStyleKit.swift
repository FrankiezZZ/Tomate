//
//  TimerStyleKit.swift
//  Tomate
//
//  Created by Dominik Hauser on 29.06.14.
//  Copyright (c) 2014 dasdom. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

class TimerStyleKit : NSObject {

    //// Cache

    struct Cache {
        static var backgroundColor: UIColor = UIColor(red: 0.141, green: 0.149, blue: 0.204, alpha: 1.000)
        static var timerColor: UIColor = UIColor(red: 0.378, green: 0.670, blue: 0.961, alpha: 1.000)
    }

    //// Initialization

    override class func load() {
    }

    //// Colors

    class var backgroundColor: UIColor { return Cache.backgroundColor }
    class var timerColor: UIColor { return Cache.timerColor }

    //// Drawing Methods

    class func drawTimer(var durationInSeconds: CGFloat, maxValue: CGFloat, showRemaining: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow = TimerStyleKit.timerColor
        let shadowOffset = CGSizeMake(0.1, -0.1)
        let shadowBlurRadius: CGFloat = 3

        //// Variable Declarations
        
//        let seconds = Int(durationInSeconds % 60)
//        let minutes = Int(durationInSeconds / 60.0)
//        let format = "02"
//        let labelText = "\(minutes.format(format))" + ":" + "\(seconds.format(format))"
        var endAngle: CGFloat
        if showRemaining {
            endAngle = CGFloat(M_PI_2) - durationInSeconds * 2 * CGFloat(M_PI) / maxValue
        } else {
            endAngle = CGFloat(M_PI_2) + durationInSeconds * 2 * CGFloat(M_PI) / maxValue
        }
        
        if !showRemaining {
            durationInSeconds = maxValue - durationInSeconds
        }
        let seconds = Int(durationInSeconds % 60)
        let minutes = Int(durationInSeconds / 60.0)
        let format = "02"
        let labelText = "\(minutes.format(format))" + ":" + "\(seconds.format(format))"

        
        //// TimerRing Drawing
        var timerRingRect = CGRectMake(10, 10, 280, 280)
        
        var fullRingPath = UIBezierPath()
        fullRingPath.addArcWithCenter(CGPointMake(timerRingRect.midX, timerRingRect.midY), radius: timerRingRect.width / 2, startAngle: 3 * CGFloat(M_PI)/2, endAngle: 3 * CGFloat(M_PI)/2-0.001, clockwise: true)
        
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, shadow.CGColor)
        TimerStyleKit.timerColor.setStroke()
        fullRingPath.lineWidth = 1.0
        fullRingPath.stroke()
        
        var timerRingPath = UIBezierPath()
        timerRingPath.addArcWithCenter(CGPointMake(timerRingRect.midX, timerRingRect.midY), radius: timerRingRect.width / 2 - 1, startAngle: 3 * CGFloat(M_PI)/2, endAngle: -endAngle, clockwise: true)

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, shadow.CGColor)
        TimerStyleKit.timerColor.setStroke()
        timerRingPath.lineWidth = 3
        timerRingPath.stroke()
        CGContextRestoreGState(context)


        //// Text Drawing
        let textRect: CGRect = CGRectMake(43, 93, 214, 113)
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, shadow.CGColor)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center;

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 80), NSForegroundColorAttributeName: TimerStyleKit.timerColor, NSParagraphStyleAttributeName: textStyle]

        NSString(string: labelText).drawInRect(CGRectOffset(textRect, 0, (textRect.height - NSString(string: labelText).boundingRectWithSize(textRect.size, options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height) / 2), withAttributes: textFontAttributes);
        CGContextRestoreGState(context)
    }

}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}
